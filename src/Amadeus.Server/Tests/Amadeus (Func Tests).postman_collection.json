{
	"info": {
		"_postman_id": "75807d23-222b-42a3-9205-faf28794b5ce",
		"name": "Amadeus (Func Tests)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test & setting collection variable\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"bearer_token\", jsonData.accessToken);",
							"    pm.collectionVariables.set(\"refresh_token\", jsonData.refreshToken);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{USER_MAIL}}\",\n    \"username\": \"{{USER_USERNAME}}\",\n    \"password\": \"{{USER_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register no mail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test & setting collection variable\", function () {",
							"    pm.response.to.have.status(400);",
							"",
							"    pm.response.to.have.jsonBody(\"errors\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"emagil\": \"{{USER_MAIL}}\",\n    \"username\": \"{{USER_USERBAME}}\",\n    \"password\": \"{{USER_PASSORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test & setting collection variable\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{USER_USERNAME}}\",\n    \"password\": \"{{USER_PASSWORD}}2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test & setting collection variable\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"bearer_token\", jsonData.accessToken);",
							"    pm.collectionVariables.set(\"refresh_token\", jsonData.refreshToken);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{USER_USERNAME}}\",\n    \"password\": \"{{USER_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all user widgets (empty list)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty widget list at start\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).eql([]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/widget",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"widget"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUsers check if present",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checking that user created is in list [SETS the USER_ID]\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"    const username = pm.collectionVariables.get(\"USER_USERNAME\");",
							"    const myuser = jsonData.find(el => el.username === username);",
							"",
							"    pm.collectionVariables.set(\"USER_ID\", myuser.id);",
							"    pm.expect(myuser.email ===  pm.collectionVariables.get(\"USER_MAIL\")).eql(true);",
							"    pm.expect(myuser.password !=  pm.collectionVariables.get(\"USER_PASSWORD\")).eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get one user check if correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting user via getById\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.id).eql(pm.collectionVariables.get(\"USER_ID\"));",
							"    pm.expect(jsonData.username).eql(pm.collectionVariables.get(\"USER_USERNAME\"));",
							"    pm.expect(jsonData.email).eql(pm.collectionVariables.get(\"USER_MAIL\"));",
							"    pm.expect(jsonData.password != pm.collectionVariables.get(\"USER_PASSWORD\")).eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/{{USER_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add user widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Creating a widget\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.type).eql(pm.collectionVariables.get(\"WIDGET_TYPE\"));",
							"    pm.expect(jsonData.userId).eql(parseInt(pm.collectionVariables.get(\"USER_ID\")));",
							"    pm.expect(jsonData.parameters).eql(JSON.parse(pm.collectionVariables.get(\"WIDGET_PARAMS\")));",
							"    pm.collectionVariables.set(\"WIDGET_ID\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type\": \"{{WIDGET_TYPE}}\",\n    \"parameters\": {{WIDGET_PARAMS}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/widget",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"widget"
					]
				}
			},
			"response": []
		},
		{
			"name": "modify widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Creating a widget\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.type).eql(\"cinema\");",
							"    pm.expect(jsonData.userId).eql(parseInt(pm.collectionVariables.get(\"USER_ID\")));",
							"    pm.expect(jsonData.parameters).eql({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type\": \"cinema\",\n    \"parameters\": {}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/widget/{{WIDGET_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"widget",
						"{{WIDGET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "modify widget (revert to original state)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Modifying a widget to original state\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.type).eql(pm.collectionVariables.get(\"WIDGET_TYPE\"));",
							"    pm.expect(jsonData.userId).eql(parseInt(pm.collectionVariables.get(\"USER_ID\")));",
							"    pm.expect(jsonData.parameters).eql(JSON.parse(pm.collectionVariables.get(\"WIDGET_PARAMS\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type\": \"{{WIDGET_TYPE}}\",\n    \"parameters\": {{WIDGET_PARAMS}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/widget/{{WIDGET_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"widget",
						"{{WIDGET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deleting a widget\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.type).eql(pm.collectionVariables.get(\"WIDGET_TYPE\"));",
							"    pm.expect(jsonData.userId).eql(parseInt(pm.collectionVariables.get(\"USER_ID\")));",
							"    pm.expect(jsonData.parameters).eql(JSON.parse(pm.collectionVariables.get(\"WIDGET_PARAMS\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/widget/{{WIDGET_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"widget",
						"{{WIDGET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update a user username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting user via getById\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.id).eql(pm.collectionVariables.get(\"USER_ID\"));",
							"    pm.expect(jsonData.username).eql(\"woxing_test\");",
							"    pm.expect(jsonData.email).eql(pm.collectionVariables.get(\"USER_MAIL\"));",
							"    pm.expect(jsonData.password != pm.collectionVariables.get(\"USER_PASSWORD\")).eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"woxing_test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{USER_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update a user username (revert to old username)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting user via getById\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.id).eql(pm.collectionVariables.get(\"USER_ID\"));",
							"    pm.expect(jsonData.username).eql(pm.collectionVariables.get(\"USER_USERNAME\"));",
							"    pm.expect(jsonData.email).eql(pm.collectionVariables.get(\"USER_MAIL\"));",
							"    pm.expect(jsonData.password != pm.collectionVariables.get(\"USER_PASSWORD\")).eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{USER_USERNAME}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{USER_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deleting a user\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.id).eql(pm.collectionVariables.get(\"USER_ID\"));",
							"    pm.expect(jsonData.username).eql(pm.collectionVariables.get(\"USER_USERNAME\"));",
							"    pm.expect(jsonData.email).eql(pm.collectionVariables.get(\"USER_MAIL\"));",
							"    pm.expect(jsonData.password != pm.collectionVariables.get(\"USER_PASSWORD\")).eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/{{USER_ID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearer_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "{{protocal}}{{host}}"
		},
		{
			"key": "protocal",
			"value": "http://"
		},
		{
			"key": "port",
			"value": "5000"
		},
		{
			"key": "host",
			"value": "{{address}}:{{port}}"
		},
		{
			"key": "address",
			"value": "localhost"
		},
		{
			"key": "bearer_token",
			"value": "none"
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "USER_ID",
			"value": ""
		},
		{
			"key": "USER_MAIL",
			"value": "efzfzefefzf.efuihe@efzef.com"
		},
		{
			"key": "USER_PASSWORD",
			"value": "zfzei576be@"
		},
		{
			"key": "USER_USERNAME",
			"value": "beatrix_test"
		},
		{
			"key": "WIDGET_TYPE",
			"value": "kino"
		},
		{
			"key": "WIDGET_PARAMS",
			"value": "{\"city\": \"Nantes\", \"hungry\": 45}"
		},
		{
			"key": "WIDGET_ID",
			"value": ""
		}
	]
}